/*============================
    Color function.
    Sets a map of base colors and returns a list of 10 lighter shades and 10 darker shades.
    @author Daria <lo.pennequin@gmail.com>
    ==========================*/

$baseColors : (
    red : hsl(4, 84%, 50%),
    pink : hsl(340, 76%, 50%),
    purple : hsl(291, 68%, 50%),
    deeppurple : hsl(262, 46%, 50%),
    indigo : hsl(231, 52%, 50%),
    blue : hsl(209, 84%, 50%),
    lightblue : hsl(199, 90%, 50%),
    cyan : hsl(187, 85%, 50%),
    teal : hsl(174, 78%, 50%),
    green : hsl(122, 53%, 50%),
    lightgreen : hsl(88, 45%, 50%),
    lime : hsl(66, 65%, 50%),
    yellow : hsl(54, 94%, 50%),
    amber : hsl(45, 94%, 50%),
    orange : hsl(36, 94%, 50%),
    deeporange : hsl(14, 94%, 50%),
    brown : hsl(16, 26%, 50%),
    grey : hsl(0, 0%, 50%),
    coldgrey : hsl(200, 18%, 50%),
    warmgrey : hsl(20, 8%, 50%),
    black : hsl(0,0,0%),
    white : hsl(0,0,100%)
);

@function colorMap($basecolors){
    $colors: ();
    @each $key, $value in $basecolors{
        $swatch : ();
        $swatch : map-merge($swatch, ($key : $value));
        @for $i from 1 through 10{
            $swatch : map-merge($swatch,(
                #{$key}-l-#{$i} : lighten($value, 5%*$i),
                #{$key}-d-#{$i} : darken($value, 5%*$i)
            ));
        }
        $colors: map-merge($colors, $swatch);
    }

    @return $colors
};

$custom-colors : colorMap($baseColors);

/*====================
    Uncomment these lines to get a class for each shade that sets the color to this shade, and another that will do the same for the background color.
    WARNING : this provides a huge amount of classes that you probably won't need/
    ==================*/

// @each $key, $value in $colors{
//     .is-#{$key}{
//         background-color: $value
//     };
//     .txt-#{$key}{
//         color: $value
//     }
// }

@function color($color){
    @return map-get($custom-colors, $color)
}
